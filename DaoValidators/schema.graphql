type DaoPool @entity {
  id: Bytes! # pool address
  validators: [ValidatorInPool!]! @derivedFrom(field: "pool")
}

type ValidatorsContract @entity(immutable: true) {
  id: Bytes! # validators contract address
  pool: Bytes!
}

type Proposal @entity {
  id: ID! # pool address + proposalId + isInternal
  proposalId: BigInt!
  isInternal: Boolean!
  quorum: BigInt!
  totalVote: BigInt!

  # only internal values
  description: String!
  creator: Bytes!
  executor: Bytes!

  voters: [ValidatorInProposal!]! @derivedFrom(field: "proposal")
}

type ValidatorInPool @entity {
  id: Bytes! # validator address + pool address
  balance: BigInt!

  pool: DaoPool!
}

type ProposalVote @entity(immutable: true) {
  id: Bytes! # tx hash + counter
  hash: Bytes!
  timestamp: BigInt!
  proposal: Proposal!

  amount: BigInt!

  voter: ValidatorInProposal!
}

type ValidatorInProposal @entity {
  id: Bytes! # user address + pool address + proposal id
  pool: DaoPool!
  proposal: Proposal!
  validator: ValidatorInPool!

  totalVote: BigInt!

  votes: [ProposalVote!]! @derivedFrom(field: "voter")
}

# @notice The entity counts interactions in single tx
# @param id forms from tx hash
# @param count the counter of interactions in single tx
type InteractionCount @entity {
  id: Bytes!
  count: BigInt!
}
