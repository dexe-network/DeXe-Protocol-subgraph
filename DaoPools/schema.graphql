# @notice The entity holds information about DP contract
# @param id forms from DP contract address
# @param daoPool the daoPool address
type DPContract @entity(immutable: true) {
  id: Bytes! # DP contract address
  daoPool: Bytes!
}

# @notice The entity holds information about settings contract
# @param id forms from settings contract address
# @param daoPool the daoPool address
type SettingsContract @entity(immutable: true) {
  id: Bytes! # settings contract address
  daoPool: Bytes!
}

# @notice The entity holds information about user keeper contract
# @param id forms from user keeper contract address
# @param daoPool the daoPool address
type UserKeeperContract @entity(immutable: true) {
  id: Bytes! # user keeper contract
  daoPool: Bytes!
}

# @notice The entity holds information about dao pool
# @param id forms from pool address
# @param name the name of pool
# @param votersCount the number of users, which voted
# @param creationTime the timestamp of creation
# @param creationBlock the block number of creation
# @param proposalCount the number of proposals
type DaoPool @entity {
  id: Bytes! # pool address
  name: String!

  erc20Token: Bytes!
  erc721Token: Bytes!

  votersCount: BigInt!
  creationTime: BigInt!
  creationBlock: BigInt!

  proposalCount: BigInt!

  totalCurrentTokenDelegated: BigInt!
  totalCurrentNFTDelegated: [BigInt!]!

  totalCurrentTokenDelegatees: BigInt!
  totalCurrentNFTDelegatees: BigInt!

  voters: [VoterInPool!]! @derivedFrom(field: "pool")
  proposals: [Proposal!]! @derivedFrom(field: "pool")
  settings: [ProposalSettings!]! @derivedFrom(field: "pool")
  executors: [Executor!]! @derivedFrom(field: "pool")
}

# @notice The entity holds information about voter
# @param id forms from user address
type Voter @entity {
  id: Bytes! # voter address
  pools: [VoterInPool!]! @derivedFrom(field: "voter")
}

# @notice The entity holds information about proposal
# @param id forms from pool address + proposalId
# @param isDP the bool flag, if true proposal is DP
# @param creator the address of creator
# @param executor the address of executor
# @param executionTimestamp the timestamp of execution
# @param currentVotes the current number of votes
# @param quorum the percentage of total votes to confirm the proposal
# @param description the url of description
# @param votersVoted the number of voters addresses
# @param pool the pool entity id
# @param settings the settings entity id
# @param voters the array of voters, which voted for proposals
type Proposal @entity {
  id: Bytes! # pool address + porposalId
  proposalId: BigInt!
  isDP: Boolean!
  rewardToken: Bytes!

  creator: Bytes!

  executor: Bytes!
  executionTimestamp: BigInt!

  currentVotes: BigInt!
  quorum: BigInt!
  description: String!
  misc: String!

  votersVoted: BigInt!
  pool: DaoPool!

  distributionProposal: [DistributionProposal!]! @derivedFrom(field: "proposal")

  settings: ProposalSettings!

  voters: [Voter!]!

  votesCount: BigInt!
  votes: [ProposalVote!]! @derivedFrom(field: "proposal")
}

# @notice The entity holds information about voter's actions in pool
# @param id forms from voter address + pool address
# @param receivedDelegation the amount of received erc20 as delegation in this pool
# @param receivedNFTDelegation the ids of received erc721 as delegation in this pool
# @param totalDPClaimed the total usd amount claimed from DPs
# @param totalClaimedUSD the total usd amount claimed from rewards
# @param currentDelegatorsCount the current numbers of received delegations
# @param pool the pool entity id
# @param voter the voter entity id
# @param claimedDPs the array of claimed dp ids
type VoterInPool @entity {
  id: Bytes! # voter address + pool address
  receivedDelegation: BigInt!
  receivedNFTDelegation: [BigInt!]!
  receivedNFTDelegationCount: BigInt!
  totalDPClaimed: BigInt!
  totalClaimedUSD: BigInt!

  currentDelegatorsCount: BigInt!

  pool: DaoPool!
  voter: Voter!

  proposals: [VoterInProposal!]! @derivedFrom(field: "voter")
  claimedDPs: [DistributionProposal!]!
}

# @notice The entity holds information about vote
# @param id forms from tx hash + counter
# @param hash the tx hash
# @param timestamp the timestamp of tx
# @param personalAmount the personal amount of vote
# @param delegatedAmount the delegated amount of vote
# @param voter the VoterInProposal entity id
# @param proposal the Proposal entity id
type ProposalVote @entity(immutable: true) {
  id: Bytes! # tx hash + counter
  hash: Bytes!
  timestamp: BigInt!

  personalAmount: BigInt!
  delegatedAmount: BigInt!

  voter: VoterInProposal!
  proposal: Proposal!
}

# @notice The entity holds information about voter's actions in proposal
# @param id forms from voter address + proposal entity id
# @param pool the pool entity id
# @param proposal the proposal entity id
# @param voter the VoterInPool entity id
# @param totalVoteAmount the total personal amount of vote for proposal
# @param totalDelegatedVoteAmount the total delegated amount of vote for proposal
# @param claimedReward the amount of claimed reward
# @param claimedDpRewardUSD the amount of dp rewards in usd
type VoterInProposal @entity {
  id: Bytes! # voter in voter address + proposal entity id
  pool: DaoPool!
  proposal: Proposal!
  voter: VoterInPool!

  totalVoteAmount: BigInt!
  totalDelegatedVoteAmount: BigInt!

  unclaimedReward: BigInt!
  claimedReward: BigInt!
  claimedDpRewardUSD: BigInt!

  votes: [ProposalVote!]! @derivedFrom(field: "voter")
}

# @notice The entity holds information about dp
# @param id forms from proposal entity id
# @param token the token address
# @param amount the amount of reward
# @param proposal the proposal entiy id
type DistributionProposal @entity {
  id: Bytes! # proposal entity id
  token: Bytes!
  amount: BigInt!

  proposal: Proposal!
}

# @notice The entity holds historical information about delegations
# @param id forms from tx hash + counter
# @param pool the pool entiy id
# @param timestamp the timestamp of delegation
# @param from the delegator address
# @param to the delegatee address
# @param isDelegate the bool flag, if true - delegate, false - undelegate
# @param amount the amount of delegation
# @param nfts the delegated nfts
# @param pair the VoterInPoolPair entity id
type DelegationHistory @entity(immutable: true) {
  id: Bytes! # tx hash + counter
  pool: DaoPool!
  timestamp: BigInt!

  from: Voter!
  to: Voter!
  isDelegate: Boolean!

  amount: BigInt!
  nfts: [BigInt!]!

  pair: VoterInPoolPair!
}

# @notice The entity holds historical information proposal settings
# @param id forms from pool address + settingsId
# @param settingsId the settings id
# @param executorDescription the url of description
# @param pool the dao pool entity id
type ProposalSettings @entity {
  id: Bytes! # pool address + settingsId
  settingsId: BigInt!

  executorDescription: String!

  executors: [Executor!]! @derivedFrom(field: "settings")
  pool: DaoPool!
}

# @notice The entity holds information about executor
# @param id forms from pool address + executor address
# @param executorAddress the address of executor
# @param settings the ProposalSettings entity id
# @param pool the pool entity id
type Executor @entity {
  id: Bytes! # dao pool address + executor address
  executorAddress: Bytes!

  settings: ProposalSettings!

  pool: DaoPool!
}

# @notice The entity holds information about current state of delegation
# @param id forms from pool address + from address + to address
# @param from the VoterInPool entity id
# @param to the VoterInPool entity id
# @param delegateAmount the current delegated amount
# @param delegateNfts the current delegated nfts
type VoterInPoolPair @entity {
  id: Bytes! # pool address + from address + to address
  from: VoterInPool!
  to: VoterInPool!

  delegateAmount: BigInt!
  delegateNfts: [BigInt!]!

  history: [DelegationHistory!]! @derivedFrom(field: "pair")
}

# @notice The entity counts interactions in single tx
# @param id forms from tx hash
# @param count the counter of interactions in single tx
type InteractionCount @entity {
  id: Bytes!
  count: BigInt!
}
