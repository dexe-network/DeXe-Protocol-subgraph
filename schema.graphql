type BasicPool @entity {
  id: ID! # pool address

  baseToken: Bytes!
  totalTrades: BigInt!
  investsToProposals: BigInt!

  proposals: [ProposalBasicPool!]! @derivedFrom(field: "pool")
  positions: [PositionInBasicPool!]! @derivedFrom(field: "basicPool")
  investors: [Bytes!]!
}

type PositionOffset @entity {
  id: ID! # trader pool address + position token address
  offset: BigInt!
}

type PositionInBasicPool @entity {
  id: ID! # trader pool address + position token address + position offset
  positionToken: Bytes!
  closed: Boolean!

  totalOpenVolume: BigInt!
  totalCloseVolume: BigInt!
  averagePositionPriceInBase: BigInt!

  basicPool: BasicPool!
  trades: [TradeInBasicPool!]! @derivedFrom(field: "position")
}

type TradeInBasicPool @entity {
  id: ID! # tx hash
  fromToken: Bytes!
  toToken: Bytes!

  volume: BigInt!
  priceInBase: BigInt!
  timestamp: BigInt!

  position: PositionInBasicPool!

  day: ExchangeBasicPoolHistory!
}

type Investment @entity {
  id: ID!
  investor: Investor!
  volume: BigInt!
  lpPurchasePrice: BigInt!

  day: InvestHistory!
}

type InvestHistory @entity {
  id: ID!
  count: BigInt!
  totalInvestVolume: BigInt!
  newInvestors: BigInt!
  removedInvestors: BigInt!

  investments: [Investment!]! @derivedFrom(field: "day")
}

type Divestment @entity {
  id: ID!
  investor: Investor!
  volume: BigInt!
  comission: BigInt!
  day: DivestHistory!
}

type DivestHistory @entity {
  id: ID!
  count: BigInt!
  totalDivestVolume: BigInt!

  divestments: [Divestment!]! @derivedFrom(field: "day")
}

type ExchangeBasicPoolHistory @entity {
  id: ID!
  exchangesCount: BigInt!
  
  trades: [TradeInBasicPool!]! @derivedFrom(field: "day")
}

type Investor @entity {
  id: ID!
  totalInvest: BigInt!
  totalDivest: BigInt!

  invests: [Investment!]! @derivedFrom(field: "investor")
}


#################### Invest POOL #########################
type InvestPool @entity {
  id: ID! # pool address

  baseToken: Bytes!
  totalTrades: BigInt!
  investsToProposals: BigInt!

  proposals: [ProposalInvestPool!]! @derivedFrom(field: "pool")
  positions: [PositionInInvestPool!]! @derivedFrom(field: "investPool")
  investors: [Bytes!]!
}

type PositionInInvestPool @entity {
  id: ID! # trader pool address + position token address + position offset
  positionToken: Bytes!
  closed: Boolean!

  totalOpenVolume: BigInt!
  totalCloseVolume: BigInt!
  averagePositionPriceInBase: BigInt!

  investPool: InvestPool!
  trades: [TradeInInvestPool!]! @derivedFrom(field: "position")
}

type TradeInInvestPool @entity {
  id: ID! # tx hash
  fromToken: Bytes!
  toToken: Bytes!

  volume: BigInt!
  priceInBase: BigInt!
  timestamp: BigInt!

  position: PositionInInvestPool!

  day: ExchangeInvestPoolHistory!
}


type ExchangeInvestPoolHistory @entity {
  id: ID!
  exchangesCount: BigInt!
  
  trades: [TradeInInvestPool!]! @derivedFrom(field: "day")
}

#################### ProposalBasicPool #########################
type ProposalBasicPool @entity{
  id:ID! # pool addr + index
  pool: BasicPool!
  investors: BigInt!

  token: Bytes!

  limit1:BigInt!
  limit2:BigInt! # from struct
  limit3:BigInt!

  exchanges: [ExchangeInProposalBasicPool!]! @derivedFrom(field: "proposal")
}

type ProposalBasicPoolInvestHistory @entity{
  id:ID! # timestamp / 84600 + position
  count: BigInt! #?
  invests: [ProposalBasicPoolInvest!]! @derivedFrom(field: "day")
}

type ProposalBasicPoolInvest @entity{
  id:ID!
  proposal: ProposalBasicPool!
  investor: Investor!
  day: ProposalBasicPoolInvestHistory!
  amount: BigInt!
}

type ProposalBasicPoolDivestHistory @entity{
  id:ID! # timestamp / 84600 + position
  count:BigInt! #?
  divests: [ProposalBasicPoolDivest!]! @derivedFrom(field: "day")
}

type ProposalBasicPoolDivest @entity{
  id:ID!
  proposal: ProposalBasicPool!
  investor:Investor!
  day: ProposalBasicPoolDivestHistory!
  amount: BigInt!
}

type ExchangeInProposalBasicPool @entity{
  id:ID!
  from: Bytes!
  to: Bytes!
  amount: BigInt!
  proposal: ProposalBasicPool!
  investor: Investor!
  day: ExchangeInProposalBasicPoolHistory!
}

type ExchangeInProposalBasicPoolHistory @entity{
  id:ID!  # timestamp / 84600 + position
  exchanges: [ExchangeInProposalBasicPool!]! @derivedFrom(field: "day")
}

########################## ProposalInvestPool #########################
type ProposalInvestPool @entity{
  id:ID! # pool addr + index
  pool: InvestPool!
  investors: BigInt!

  token: Bytes!

  limit1:BigInt!
  limit2:BigInt! #from struct

  distributions: [Distribution!]! @derivedFrom(field: "proposal")
}

type ProposalInvestPoolInvestHistory @entity{
  id:ID! # timestamp / 84600 + position
  count: BigInt! #?
  invests: [ProposalInvestPoolInvest!]! @derivedFrom(field: "day")
}

type ProposalInvestPoolInvest @entity{
  id:ID!
  proposal: ProposalInvestPool!
  investor: Investor!
  day: ProposalInvestPoolInvestHistory!
  amount: BigInt!
}

type ProposalInvestPoolDivestHistory @entity{
  id:ID! # timestamp / 84600 + position
  count:BigInt! #?
  divests: [ProposalInvestPoolDivest!]! @derivedFrom(field: "day")
}

type ProposalInvestPoolDivest @entity{
  id:ID!
  proposal: ProposalInvestPool!
  investor: Investor!
  day: ProposalInvestPoolDivestHistory!
  amount: BigInt!
}

type Distribution @entity{
  id:ID!
  proposal: ProposalInvestPool!
  amount:BigInt!
  day: DistributionHistory!
}

type DistributionHistory @entity{
  id: ID! #UTS / 84600 + position
  distributions: [Distribution!]! @derivedFrom(field: "day")
}