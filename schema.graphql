enum CommissionPeriod {
  PERIOD_1
  PERIOD_2
  PERIOD_3
}

type PoolParameters @entity {
  id: ID!
  descriptionURL: String
  trader: Bytes
  activePortfolio: Boolean
  privatePool: Boolean
  totalLPEmission: BigInt
  baseToken: Bytes            #Token type
  baseTokenDecimals: BigInt   #May be useless
  minimalInvestment: BigInt
  commissionPeriod: CommissionPeriod    # check this 
  commissionPercentage: BigInt
}

type Investor @entity {
  id: ID!
}

type PairInvestorBasicPool @entity{
  id: ID!
  investor: Investor
  pool: BasicTraderPool

  exchanges: [ExchangeToBasicPool!]! @derivedFrom(field: "pair")
}

type PairInvestorInvestPool @entity{
  id: ID!
  investor: Investor
  pool: InvestTraderPool

  exchanges: [ExchangeToInvestPool!]! @derivedFrom(field: "pair")
}

type PairInvestorRiskyPool @entity{
  id: ID!
  investor: Investor
  pool: RiskyTraderPool
  
  exchanges: [ExchangeToRiskyPool!]! @derivedFrom(field: "pair")
}

type InvestsToRiskyPool @entity {
  id: ID!
  amount: BigInt
  investorToPool: PairInvestorRiskyPool
}

type InvestsToBasicPool @entity {
  id: ID!
  amount: BigInt
  investorToPool: PairInvestorBasicPool
}

type InvestsToInvestPool @entity {
  id: ID!
  amount: BigInt
  investorToPool: PairInvestorInvestPool
}

type BasicTraderPool @entity {
  id: ID!
  
  poolParameters: PoolParameters

  investors: [PairInvestorBasicPool!]! @derivedFrom(field: "pool")
  positions: [PositionForBasicPool!]! @derivedFrom(field: "pool")
}

type RiskyTraderPool @entity {
  id: ID!

  poolParameters: PoolParameters

  investors: [PairInvestorRiskyPool!]! @derivedFrom(field: "pool")
  positions: [PositionForRiskyPool!]! @derivedFrom(field: "pool")
}

type InvestTraderPool @entity {
  id: ID!
  
  poolParameters: PoolParameters

  investors: [PairInvestorInvestPool!]! @derivedFrom(field: "pool")
  positions: [PositionForInvestPool!]! @derivedFrom(field: "pool")
}

type PositionForBasicPool @entity {
  id: ID!
  pool: BasicTraderPool

  token1: Bytes
  token2: Bytes

  exchanges: [ExchangeToBasicPool!]! @derivedFrom(field: "position")
}

type PositionForRiskyPool @entity {
  id: ID!
  pool: RiskyTraderPool

  token1: Bytes
  token2: Bytes

  exchanges: [ExchangeToRiskyPool!]! @derivedFrom(field: "position")
}

type PositionForInvestPool @entity {
  id: ID!
  pool: InvestTraderPool

  token1: Bytes
  token2: Bytes

  exchanges: [ExchangeToInvestPool!]! @derivedFrom(field: "position")
}


type ExchangeToBasicPool @entity {
  id: ID!
  pair: PairInvestorBasicPool
  investor: Investor
  amount: BigInt
  position: PositionForBasicPool
}

type ExchangeToRiskyPool @entity {
  id: ID!
  pair: PairInvestorRiskyPool
  investor: Investor
  amount: BigInt
  position: PositionForRiskyPool
}

type ExchangeToInvestPool @entity {
  id: ID!
  pair: PairInvestorInvestPool
  investor: Investor
  amount: BigInt
  position: PositionForInvestPool
}
