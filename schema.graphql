type BasicPool @entity {
  id: ID! # pool address

  baseToken: Bytes!
  totalTrades: BigInt!
  positions: [PositionInBasicPool!]! @derivedFrom(field: "basicPool")
  investors: [Bytes!]!
}

type PositionOffset @entity {
  id: ID! # trader pool address + position token address
  offset: BigInt!
}

type PositionInBasicPool @entity {
  id: ID! # trader pool address + position token address + position offset
  positionToken: Bytes!
  closed: Boolean!

  totalOpenVolume: BigInt!
  totalCloseVolume: BigInt!
  averagePositionPriceInBase: BigInt!

  basicPool: BasicPool!
  trades: [TradeInBasicPool!]! @derivedFrom(field: "position")
}

type TradeInBasicPool @entity {
  id: ID! # tx hash
  fromToken: Bytes!
  toToken: Bytes!

  volume: BigInt!
  priceInBase: BigInt!
  timestamp: BigInt!

  position: PositionInBasicPool!

  day: ExchangeBasicPoolHistory!
}

type Investment @entity {
  id: ID!
  investor: Investor!
  volume: BigInt!
  lpPurchasePrice: BigInt!

  day: InvestHistory!
}

type InvestHistory @entity {
  id: ID!
  count: BigInt!
  totalInvestVolume: BigInt!
  newInvestors: BigInt!
  removedInvestors: BigInt!

  investments: [Investment!]! @derivedFrom(field: "day")
}

type Divestment @entity {
  id: ID!
  investor: Investor!
  volume: BigInt!

  day: DivestHistory!
}

type DivestHistory @entity {
  id: ID!
  count: BigInt!
  totalDivestVolume: BigInt!

  divestments: [Divestment!]! @derivedFrom(field: "day")
}

type ExchangeBasicPoolHistory @entity {
  id: ID!
  exchangesCount: BigInt!
  
  trades: [TradeInBasicPool!]! @derivedFrom(field: "day")
}

type Investor @entity {
  id: ID!
  totalInvest: BigInt!
  totalDivest: BigInt!

  invests: [Investment!]! @derivedFrom(field: "investor")
}


#################### Invest POOL #########################
type InvestPool @entity {
  id: ID! # pool address

  baseToken: Bytes!
  totalTrades: BigInt!
  positions: [PositionInInvestPool!]! @derivedFrom(field: "investPool")
  investors: [Bytes!]!
}

type PositionInInvestPool @entity {
  id: ID! # trader pool address + position token address + position offset
  positionToken: Bytes!
  closed: Boolean!

  totalOpenVolume: BigInt!
  totalCloseVolume: BigInt!
  averagePositionPriceInBase: BigInt!

  investPool: InvestPool!
  trades: [TradeInInvestPool!]! @derivedFrom(field: "position")
}

type TradeInInvestPool @entity {
  id: ID! # tx hash
  fromToken: Bytes!
  toToken: Bytes!

  volume: BigInt!
  priceInBase: BigInt!
  timestamp: BigInt!

  position: PositionInInvestPool!

  day: ExchangeInvestPoolHistory!
}


type ExchangeInvestPoolHistory @entity {
  id: ID!
  exchangesCount: BigInt!
  
  trades: [TradeInInvestPool!]! @derivedFrom(field: "day")
}
