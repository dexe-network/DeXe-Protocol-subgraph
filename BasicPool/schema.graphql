# @notice The etity holds information about current position offset. Uses to avoid collisions in position id
# @param id forms from pool address + position token address
# @param offset the current position index offset
type PositionOffset @entity {
  id: ID! # trader pool address + position token address
  offset: BigInt!
}

####################################### BasicPool #######################################

# @notice The entity that holds informations about pool
# @param id the pool address
# @param baseToken the address of base token
# @param ticker the symbol of pool's token
# @param name the name of pool's token
# @param descriptionURL the description url address from contract
# @param creationTime the timestamp of creating pool
# @param maxLoss the maximum loss among all positions
# @param totalTrades the total number of trades
# @param totalClosedPositions the total number of closed positions
# @param averageTrades the average trades per day
# @param averagePositionTime the average live time of all positions
# @param investors the array with Investor entities
type BasicPool @entity {
  id: ID! # pool address
  baseToken: Bytes!
  ticker: String!
  name: String!
  descriptionURL: String!
  creationTime: BigInt!
  maxLoss: BigInt!

  totalTrades: BigInt!
  totalClosedPositions: BigInt!

  averageTrades: BigInt!
  averagePositionTime: BigInt!

  investors: [Investor!]!

  proposals: [Proposal!]! @derivedFrom(field: "basicPool")
  positions: [Position!]! @derivedFrom(field: "basicPool")
  invests: [InvestHistory!]! @derivedFrom(field: "basicPool")
  divests: [DivestHistory!]! @derivedFrom(field: "basicPool")
  exchanges: [ExchangeHistory!]! @derivedFrom(field: "basicPool")
  history: [BasicPoolHistory!]! @derivedFrom(field: "pool")
  priceHistory: [BasicPoolPriceHistory!]! @derivedFrom(field: "pool")
}

# @notice The entity holds historical information about price of pool. Uses for store info every 100 blocks.
# @param id forms from pool address + timestamp / 1000
# @param price the total pool usd price from contract
# @param supply the total lp emission of pool from contract
# @param pool the id of pool, type is string for reverse lookup
# @param poolBase the total pool base from contract
# @param seconds the timestamp / 86400
# @param absPNL the absolute PNL for all time
# @param percPNL the PNL at percents with 0.01% error margin
type BasicPoolPriceHistory @entity {
  id: ID!
  usdTVL: BigInt!
  supply: BigInt!
  pool: BasicPool!
  baseTVL: BigInt!
  seconds: BigInt!
  absPNL: BigInt!
  percPNL: BigInt!
}

# @notice The entity holds historical information about pool state.
# @param id forms from pool address + timestamp / 86400
# @param investors the array with Investor entity
# @param pool address of pool for reverse lookup
# @param day timestamp of day, forms from timestamp / 86400
type BasicPoolHistory @entity {
  id: ID! # pool address + timestamp / 86400
  investors: [Investor!]!
  pool: BasicPool!
  day: BigInt!
}

# @notice The entity holds information about Investor
# @param id the investor address
# @param insurance the bought insurance amount
# @param claimedAmount the paid insurance amount
# @param activePools the array with pools with investor's invests
# @param allPools the array with pools where the  investor has ever invested
type Investor @entity {
  id: ID! # investor address
  insurance: BigInt!
  claimedAmount: BigInt!

  activePools: [BasicPool!]!
  allPools: [BasicPool!]!
}

# @notice The entity holds information about investor's invests and divests in pool
# @param id forms from investor addres + pool address
# @param totalInvestVolume the total volume of investor's invests to pool
# @param totalDivestVolume the total volume of investor's divests from pool
type InvestorInfo @entity {
  id: ID! # investor address + pool address
  totalInvestVolume: BigInt!
  totalDivestVolume: BigInt!

  invests: [Invest!]! @derivedFrom(field: "investor")
  divests: [Divest!]! @derivedFrom(field: "investor")
  proposalInvests: [ProposalInvest!]! @derivedFrom(field: "investor")
  proposalDivests: [ProposalDivest!]! @derivedFrom(field: "investor")
  investLPHistory: [InvestorLPHistory!]! @derivedFrom(field: "investorInfo")
}

# @notice The entity holds historical information about investor's lp balance
# @param id forms from investorInfo id + day (timestamp / 86400)
# @param lpBalance the investor's balance of lp of pool from InvestorInfo address
# @param investorInfo the investorInfo entity id for reverse lookup
# @param day timestamp of day, forms from timestamp / 86400
type InvestorLPHistory @entity {
  id: ID! # investorInfo + day
  lpBalance: BigInt!
  investorInfo: InvestorInfo!
  day: BigInt!
}

# @notice The entity holds information about position in pool
# @param id forms from pool address + position token address + position offset from PositionOffset entity
# @param positionToken the address of position token
# @param closed the state of position, true when closed
# @param totalOpenVolume the total open volume of position
# @param totalCloseVolume the total close volume of position
# @param liveTime the time in millis the position was open for if the position is closed, and timestamp of position's creation time if it is still open
# @param basicPool the id of basicPool (address) for reverse lookup
type Position @entity {
  id: ID! # trader pool address + position token address + position offset
  positionToken: Bytes!
  closed: Boolean!

  totalOpenVolume: BigInt!
  totalCloseVolume: BigInt!
  liveTime: BigInt!

  basicPool: BasicPool!
  exchanges: [Exchange!]! @derivedFrom(field: "position")
}

# @notice The entity holds information about exchange in pool's position
# @param id forms from transaction hash, useless
# @param fromToken the address of in token
# @param toToken the address of out token
# @param fromVolume the volume of in token
# @param toVolume the volume of out token
# @param position the id of pool's position
# @param day the history id (pool address + timestamp / 86400), for reverse lookup
type Exchange @entity {
  id: ID! # tx hash
  fromToken: Bytes!
  toToken: Bytes!

  fromVolume: BigInt!
  toVolume: BigInt!
  position: Position!

  day: ExchangeHistory!
}

# @notice The entity holds information about investition in pool
# @param id forms from transaction hash, useless
# @param investor the id of InvestorInfo (investor address + pool address)
# @param volumeBase the volume of investition
# @param lpPurchasePrice the volumeBase / minted lp
# @param day the history id (pool address + timestamp / 86400), for reverse lookup
type Invest @entity {
  id: ID! # tx hash
  investor: InvestorInfo!
  volumeBase: BigInt!
  lpPurchasePrice: BigInt!

  day: InvestHistory!
}

# @notice The entity holds information about divest in pool
# @param id forms from transaction hash, useless
# @param investor the id of InvestorInfo (investor address + pool address)
# @param volumeBase the volume of divest
# @param commision the volume of commision
# @param day the history id (pool address + timestamp / 86400), for reverse lookup
type Divest @entity {
  id: ID! # tx hash
  investor: InvestorInfo!
  volumeBase: BigInt!
  commission: BigInt!

  day: DivestHistory!
}

# @notice The entity holds historical information about invests in pool
# @param id forms from pool address + timestamp / 86400
# @param totalInvestVolume the total invest volume at current day
# @param day the timestamp / 86400
# @param basicPool the basicPool id (address), for reverse lookup
type InvestHistory @entity {
  id: ID! # pool address + timestamp / 86400
  totalInvestVolume: BigInt!
  day: BigInt!
  basicPool: BasicPool!

  investments: [Invest!]! @derivedFrom(field: "day")
}

# @notice The entity holds historical information about divests in pool
# @param id forms from pool address + timestamp / 86400
# @param totalInvestVolume the total divest volume at current day
# @param day the timestamp / 86400
# @param basicPool the basicPool id (address), for reverse lookup
type DivestHistory @entity {
  id: ID! # pool address + timestamp / 86400
  totalDivestVolume: BigInt!
  day: BigInt!
  basicPool: BasicPool!

  divestments: [Divest!]! @derivedFrom(field: "day")
}

# @notice The entity holds historical information about exchanges in pool
# @param basicPool the basicPool id (address), for reverse lookup
# @param day the timestamp / 86400
type ExchangeHistory @entity {
  id: ID! # pool address + timestamp / 86400
  basicPool: BasicPool!
  day: BigInt!

  exchanges: [Exchange!]! @derivedFrom(field: "day")
}

####################################### Proposal #######################################

# @notice The entity holds information about proposal contract
# @param id the address of proposal contract
type ProposalContract @entity {
  id: ID!
}

# @notice The entity holds information about proposal contract
# @param token the address of proposal token
# @param timestampLimit the timestamp from contract after which the investment into proposal closes
# @param investLPLimit the maximal number of invested LP tokens from contract after which the investment into the proposal closes
# @param maxTokenPriceLimit the maximal price of the proposal token from contract after which the investment into the proposal closes
# @param totalOpenVolume the total open volume of proposal
# @param totalCloseVolume the total close volume of proposal
# @param basicPool the basicPool id (address), for reverse lookup
type Proposal @entity {
  id: ID! # pool address + proposal index
  token: Bytes!

  timestampLimit: BigInt!
  investLPLimit: BigInt!
  maxTokenPriceLimit: BigInt!

  totalOpenVolume: BigInt!
  totalCloseVolume: BigInt!

  basicPool: BasicPool!
  proposalInvests: [ProposalInvestHistory!]! @derivedFrom(field: "proposal")
  proposalDivests: [ProposalDivestHistory!]! @derivedFrom(field: "proposal")
  exchanges: [ProposalExchangeHistory!]! @derivedFrom(field: "proposal")
}

# @notice The entity holds information about invest into proposal
# @param id forms from transaction hash, useless
# @param amountLP the lp amount of investment
# @param amountBase the amount of investment in base token
# @param investor the investorInfo entity id for reverse lookup
# @param day the history id (proposal id + timestamp / 86400), for reverse lookup
type ProposalInvest @entity {
  id: ID! # tx hash
  amountLP: BigInt!
  amountBase: BigInt!

  investor: InvestorInfo!
  day: ProposalInvestHistory!
}

# @notice The entity holds information about divests from proposal
# @param id forms from transaction hash, useless
# @param amountLP the lp amount of divest
# @param amountBase the amount of divest in base token
# @param investor the investorInfo entity id for reverse lookup
# @param day the history id (proposal id + timestamp / 86400), for reverse lookup
type ProposalDivest @entity {
  id: ID! # tx hash
  amountLP: BigInt!
  amountBase: BigInt!

  investor: InvestorInfo!
  day: ProposalDivestHistory!
}

# @notice The entity holds information about exchange in proposal
# @param id forms from transaction hash, useless
# @param fromToken the address of in token
# @param toToken the address of out token
# @param fromVolume the volume of in token
# @param toVolume the volume of out token
# @param day the history id (proposal id + timestamp / 86400), for reverse lookup
type ProposalExchange @entity {
  id: ID! # tx hash
  fromToken: Bytes!
  toToken: Bytes!

  fromVolume: BigInt!
  toVolume: BigInt!

  day: ProposalExchangeHistory!
}

# @notice The entity holds historical information about invests in proposal
# @param id forms from proposal id + timestamp / 86400
# @param totalInvestVolumeLP the total volume of invested lp
# @param totalInvestVolumeBase the total volume of invested in base token
# @param day the timestamp / 86400
# @param proposal the id of proposal entity
type ProposalInvestHistory @entity {
  id: ID! # Proposal.id + timestamp / 86400
  totalInvestVolumeLP: BigInt!
  totalInvestVolumeBase: BigInt!
  day: BigInt!

  proposal: Proposal!
  invests: [ProposalInvest!]! @derivedFrom(field: "day")
}

# @notice The entity holds historical information about divests in proposal
# @param id forms from proposal id + timestamp / 86400
# @param totalDivestVolumeLP the total volume of divestes lp
# @param totalDivestVolumeBase the total volume of divested in base token
# @param day the timestamp / 86400
# @param proposal the id of proposal entity
type ProposalDivestHistory @entity {
  id: ID! # Proposal.id + timestamp / 86400
  totalDivestVolumeLP: BigInt!
  totalDivestVolumeBase: BigInt!
  day: BigInt!

  proposal: Proposal!
  divests: [ProposalDivest!]! @derivedFrom(field: "day")
}

# @notice The entity holds historical information about exchanges in proposal
# @param id forms from proposal id + timestamp / 86400
# @param day the timestamp / 86400
type ProposalExchangeHistory @entity {
  id: ID! # Proposal.id + timestamp / 86400
  proposal: Proposal!
  day: BigInt!

  exchanges: [ProposalExchange!]! @derivedFrom(field: "day")
}
