####################################  Pool <-> Proposal  ####################################
# @notice The entity holds information about trader pool
# @param id forms from pool address
# @param trader the address of trader
# @param proposalContract the address of proposal contract
type Pool @entity(immutable: true) {
  id: Bytes! # pool address
  trader: Bytes!
  proposalContract: Bytes!
}

# @notice The entity holds information about proposal contract
# @param id forms from proposal contract address
# @param pool the address of pool
type ProposalContract @entity(immutable: true) {
  id: Bytes! # proposal contract address
  pool: Bytes!
}

#################################### Transaction History ####################################

# @noitce The entity holds information about Transaction
# @param id forms from tx hash
# @param timestamp the timestamp of block
# @param block the number of block
# @param type the number associated with enum of interactions type
# @param user the address of sender
# @param interactionsCount the interactions count
type Transaction @entity {
  id: Bytes! # tx hash
  timestamp: BigInt!
  block: BigInt!
  type: [BigInt!]!

  user: Bytes!

  interactedWithPool: Pool!

  interactionsCount: BigInt!

  daoPoolCreate: [DaoPoolCreate!]! @derivedFrom(field: "transaction")
  daoPoolDelegate: [DaoPoolDelegate!]! @derivedFrom(field: "transaction")
  daoPoolVote: [DaoPoolVote!]! @derivedFrom(field: "transaction")
  daoProposalCreate: [DaoProposalCreate!]! @derivedFrom(field: "transaction")
  daoPoolExecute: [DaoPoolExecute!]! @derivedFrom(field: "transaction")
  daoPoolRewardClaim: [DaoPoolRewardClaim!]! @derivedFrom(field: "transaction")
  daoPoolVest: [DaoPoolVest!]! @derivedFrom(field: "transaction")
  daoPoolMovedToValidators: [DaoPoolMovedToValidators!]! @derivedFrom(field: "transaction")
  daoPoolOffchainResultsSaved: [DaoPoolOffchainResultsSaved!]! @derivedFrom(field: "transaction")

  daoValidatorProposalCreate: [DaoValidatorProposalCreate!]! @derivedFrom(field: "transaction")
  daoValidatorProposalVote: [DaoValidatorProposalVote!]! @derivedFrom(field: "transaction")
  daoValidatorProposalExecute: [DaoValidatorProposalExecute!]! @derivedFrom(field: "transaction")
}

#################################### DAO interactions ####################################

# @notice The entity holds information about creation of dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param name the name of pool
# @param transaction the transaction entity id
type DaoPoolCreate @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  name: String!

  transaction: Transaction!
}

# @notice The entity holds information about delegation on dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param amount the delegation amount
# @param transaction the transaction entity id
type DaoPoolDelegate @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about vote in dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param isVoteFor bool flag, if true - vote for, if false - vote against
# @param amount the vote amount
# @param transaction the transaction entity id
type DaoPoolVote @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  voteType: BigInt!
  isVoteFor: Boolean!
  amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about dao pool creation
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoProposalCreate @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about exchange in dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoPoolExecute @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about claims in dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoPoolRewardClaim @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about deposit/withdraw
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param nfts the array of nft ids
# @param amount the amount of deposit
# @param transaction the transaction entity id
type DaoPoolVest @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!

  nfts: [BigInt!]!
  amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about move proposal to validators
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoPoolMovedToValidators @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!

  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about save offchain results
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param transaction the transaction entity id
type DaoPoolOffchainResultsSaved @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!

  transaction: Transaction!
}

# @notice The entity holds information about vote in dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoValidatorProposalCreate @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!
  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about validators vote in proposal
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param isVoteFor bool flag, if true - vote for, if false - vote against
# @param amount the vote amount
# @param transaction the transaction entity id
type DaoValidatorProposalVote @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!
  proposalId: BigInt!

  isVoteFor: Boolean!
  amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about execution of proposal in dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoValidatorProposalExecute @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!
  proposalId: BigInt!

  transaction: Transaction!
}
