####################################  Pool <-> Proposal  ####################################
# @notice The entity holds information about trader pool
# @param id forms from pool address
# @param trader the address of trader
# @param proposalContract the address of proposal contract
type Pool @entity(immutable: true) {
  id: Bytes! # pool address
  trader: Bytes!
  proposalContract: Bytes!
}

# @notice The entity holds information about proposal contract
# @param id forms from proposal contract address
# @param pool the address of pool
type ProposalContract @entity(immutable: true) {
  id: Bytes! # proposal contract address
  pool: Bytes!
}

#################################### Transaction History ####################################

# @noitce The entity holds information about Transaction
# @param id forms from tx hash
# @param timestamp the timestamp of block
# @param block the number of block
# @param type the number associated with enum of interactions type
# @param user the address of sender
# @param interactionsCount the interactions count
type Transaction @entity {
  id: Bytes! # tx hash
  timestamp: BigInt!
  block: BigInt!
  type: [BigInt!]!

  user: Bytes!

  interactionsCount: BigInt!

  exchange: [Exchange!]! @derivedFrom(field: "transaction")
  vest: [Vest!]! @derivedFrom(field: "transaction")
  poolCreate: [PoolCreate!]! @derivedFrom(field: "transaction")

  proposalEdit: [ProposalEdit!]! @derivedFrom(field: "transaction")

  riskyProposalCreate: [RiskyProposalCreate!]! @derivedFrom(field: "transaction")
  riskyProposalExchange: [RiskyProposalExchange!]! @derivedFrom(field: "transaction")
  riskyProposalVest: [ProposalVest!]! @derivedFrom(field: "transaction")

  investProposalClaimSupply: [InvestProposalClaimOrSupply!]! @derivedFrom(field: "transaction")
  investProposalCreate: [InvestProposalCreate!]! @derivedFrom(field: "transaction")
  investProposalWithdraw: [InvestProposalWithdraw!]! @derivedFrom(field: "transaction")
  investProposalConvertToDividends: [InvestProposalConvertToDividends!]! @derivedFrom(field: "transaction")

  insuranceStake: [InsuranceStake!]! @derivedFrom(field: "transaction")

  getPerformanceFee: [GetPerformanceFee!]! @derivedFrom(field: "transaction")

  onlyPool: [OnlyPool!]! @derivedFrom(field: "transaction")
}

# @notice The entity holds information about exchange
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param fromToken the address of from token
# @param toToken the address of to token
# @param fromVolume the volume of from token
# @param toVolume the volume of to token
# @param transaction the transaction entity id
type Exchange @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  fromToken: Bytes!
  toToken: Bytes!

  fromVolume: BigInt!
  toVolume: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about invest/divest in pool
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param baseAmount the amount in base token
# @param lpAmount the amount in lp token
# @param transaction the transaction entity id
type Vest @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  baseAmount: BigInt!
  lpAmount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about pool creation
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param symbol the string with pool's symbol
# @param transaction the transaction entity id
type PoolCreate @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  symbol: String!

  transaction: Transaction!
}
# @notice The entity holds information about creation of risky proposal
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param proposalId the internal id of proposal
# @param token the address of token
# @param transaction the transaction entity id
type RiskyProposalCreate @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  proposalId: BigInt!
  token: Bytes!

  transaction: Transaction!
}

# @notice The entity holds information about changes in pool
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param proposalId the internal id of proposal
# @param transaction the transaction entity id
type ProposalEdit @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about invest/divest in proposal
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param proposalId the internal id of proposal
# @param baseAmount the amount in base token
# @param lp2Amount the amount in lp2 token
# @param transaction the transaction entity id
type ProposalVest @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  proposalId: BigInt!

  baseAmount: BigInt!
  lp2Amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about exchange in risky proposal
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param proposalId the internal id of proposal
# @param fromToken the address of from token
# @param toToken the address of to token
# @param fromVolume the volume of from token
# @param toVolume the volume of to token
# @param transaction the transaction entity id
type RiskyProposalExchange @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  proposalId: BigInt!

  fromToken: Bytes!
  toToken: Bytes!

  fromVolume: BigInt!
  toVolume: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about creation of invest proposal
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param proposalId the internal id of proposal
# @param transaction the transaction entity id
type InvestProposalCreate @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about withdraw in invest proposal
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param proposalId the internal id of proposal
# @param amount the amount of withdraw
# @param transaction the transaction entity id
type InvestProposalWithdraw @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  proposalId: BigInt!

  amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about claim/supply in invest proposal
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param proposalId the internal id of proposal
# @param tokens the tokens of claim/supply
# @param amounts the amounts of claim/supply
# @param transaction the transaction entity id
type InvestProposalClaimOrSupply @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  proposalId: BigInt!

  tokens: [Bytes!]!
  amounts: [BigInt!]!

  transaction: Transaction!
}

# @notice The entity holds information about convertions to dividends in invest proposal
# @param id forms from tx hash + interactionCount
# @param pool the address of pool
# @param proposalId the internal id of proposal
# @param amount the new invested amount
# @param token the address of base token
# @param transaction the transaction entity id
type InvestProposalConvertToDividends @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  proposalId: BigInt!

  amount: BigInt!
  token: Bytes!

  transaction: Transaction!
}

# @notice The entity holds information about stake/unstake in insurance
# @param id forms from tx hash + interactionCount
# @param amount the amount of stake
# @param transaction the transaction entity id
type InsuranceStake @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about getting performance fee
# @param id forms from tx hash + interactionCount
# @param baseAmount the amount in base token
# @param lpAmount the amount in lp token
# @param transaction the transaction entity id
type GetPerformanceFee @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  baseAmount: BigInt!
  lpAmount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about pool address of transaction
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param transaction the transaction entity id
type OnlyPool @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  transaction: Transaction!
}

#################################### DAO interactions ####################################

# @notice The entity holds information about creation of dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param name the name of pool
# @param transaction the transaction entity id
type DaoPoolCreate @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!
  name: String!

  transaction: Transaction!
}

# @notice The entity holds information about delegation on dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param amount the delegation amount
# @param transaction the transaction entity id
type DaoPoolDelegate @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about vote in dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param isVoteFor bool flag, if true - vote for, if false - vote against
# @param amount the vote amount
# @param transaction the transaction entity id
type DaoPoolVote @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  isVoteFor: Boolean!
  amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about dao pool creation
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoProposalCreate @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about exchange in dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoPoolExecute @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about claims in dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoPoolRewardClaim @entity(immutable: true) {
  id: Bytes! # tx hash + interactionCount
  pool: Bytes!

  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about deposit/withdraw
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param nfts the array of nft ids
# @param amount the amount of deposit
# @param transaction the transaction entity id
type DaoPoolVest @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!

  nfts: [BigInt!]!
  amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about move proposal to validators
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoPoolMovedToValidators @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!

  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about save offchain results
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param transaction the transaction entity id
type DaoPoolOffchainResultsSaved @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!

  transaction: Transaction!
}

# @notice The entity holds information about vote in dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoValidatorProposalCreate @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!
  proposalId: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about validators vote in proposal
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param isVoteFor bool flag, if true - vote for, if false - vote against
# @param amount the vote amount
# @param transaction the transaction entity id
type DaoValidatorProposalVote @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!
  proposalId: BigInt!

  isVoteFor: Boolean!
  amount: BigInt!

  transaction: Transaction!
}

# @notice The entity holds information about execution of proposal in dao pool
# @param id forms from tx hash + interactionCount
# @param pool the pool address
# @param proposalId the id of proposal
# @param transaction the transaction entity id
type DaoValidatorProposalExecute @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!
  proposalId: BigInt!

  transaction: Transaction!
}
